{"version":3,"sources":["components/square-box/index.js","utils/debounce-time.js","components/transition-speed/index.js","constants/index.js","utils/validate-transition-speed.js","components/area-container/index.js","App.js","index.js"],"names":["SquareBox","forwardRef","ref","transform","speed","getTransition","useCallback","useState","transition","setTransition","useEffect","style","className","debounce","func","wait","lastArgs","lastThis","result","timerId","lastCallTime","maxing","TypeError","invokeFunc","time","args","thisArg","undefined","apply","startTimer","pendingFunc","setTimeout","leadingEdge","timerExpired","shouldInvoke","timeSinceLastCall","Date","now","trailingEdge","remainingWait","debounced","isInvoking","this","cancel","clearTimeout","flush","pending","TransitionSpeed","onSpeedChange","value","setValue","errors","setErrors","handleOnChange","target","length","parseFloat","validateTransitionSpeed","status","errs","onKeyUp","event","defaultValue","map","error","index","AreaContainer","onClick","children","App","areaRef","useRef","current","getBoundingClientRect","areaX","x","areaY","y","setTransform","setSpeed","squareRef","handleOnClick","e","preventDefault","pageX","offsetWidth","pageY","offsetHeight","handleOnSpeedChange","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e0f8e59e.chunk.js","sourcesContent":["import React, { forwardRef, useState, useEffect, useCallback } from 'react';\nimport './index.scss';\n\nconst SquareBox = forwardRef(({ transform, speed }, ref) => {\n    // Get transition based on speed number\n    const getTransition = useCallback((speed) => {\n        if (!speed) return 'transform 0s cubic-bezier(0.075, 0.82, 0.165, 1)';\n        return `transform ${speed}s cubic-bezier(0.075, 0.82, 0.165, 1)`;\n    }, []);\n\n    const [transition, setTransition] = useState(getTransition(speed));\n\n    useEffect(() => {\n        setTransition(getTransition(speed));\n    }, [getTransition, speed]);\n\n    return (\n        <span\n            ref={ref}\n            style={{\n                transition,\n                ...(transform && { transform }),\n            }}\n            className=\"square-box\"\n        />\n    );\n});\n\nexport default SquareBox;\n","// https://github.com/lodash/lodash/blob/master/debounce.js\nexport { debounce };\nfunction debounce(func, wait) {\n    let lastArgs, lastThis, maxWait, result, timerId, lastCallTime;\n\n    let lastInvokeTime = 0;\n    let leading = false;\n    let maxing = false;\n    let trailing = true;\n\n    if (typeof func !== 'function') {\n        throw new TypeError('Expected a function');\n    }\n    wait = +wait || 0;\n\n    function invokeFunc(time) {\n        const args = lastArgs;\n        const thisArg = lastThis;\n\n        lastArgs = lastThis = undefined;\n        lastInvokeTime = time;\n        result = func.apply(thisArg, args);\n        return result;\n    }\n\n    function startTimer(pendingFunc, wait) {\n        return setTimeout(pendingFunc, wait);\n    }\n\n    function cancelTimer(id) {\n        clearTimeout(id);\n    }\n\n    function leadingEdge(time) {\n        // Reset any `maxWait` timer.\n        lastInvokeTime = time;\n        // Start the timer for the trailing edge.\n        timerId = startTimer(timerExpired, wait);\n        // Invoke the leading edge.\n        return leading ? invokeFunc(time) : result;\n    }\n\n    function remainingWait(time) {\n        const timeSinceLastCall = time - lastCallTime;\n        const timeSinceLastInvoke = time - lastInvokeTime;\n        const timeWaiting = wait - timeSinceLastCall;\n\n        return maxing\n            ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke)\n            : timeWaiting;\n    }\n\n    function shouldInvoke(time) {\n        const timeSinceLastCall = time - lastCallTime;\n        const timeSinceLastInvoke = time - lastInvokeTime;\n\n        // Either this is the first call, activity has stopped and we're at the\n        // trailing edge, the system time has gone backwards and we're treating\n        // it as the trailing edge, or we've hit the `maxWait` limit.\n        return (\n            lastCallTime === undefined ||\n            timeSinceLastCall >= wait ||\n            timeSinceLastCall < 0 ||\n            (maxing && timeSinceLastInvoke >= maxWait)\n        );\n    }\n\n    function timerExpired() {\n        const time = Date.now();\n        if (shouldInvoke(time)) {\n            return trailingEdge(time);\n        }\n        // Restart the timer.\n        timerId = startTimer(timerExpired, remainingWait(time));\n    }\n\n    function trailingEdge(time) {\n        timerId = undefined;\n\n        // Only invoke if we have `lastArgs` which means `func` has been\n        // debounced at least once.\n        if (trailing && lastArgs) {\n            return invokeFunc(time);\n        }\n        lastArgs = lastThis = undefined;\n        return result;\n    }\n\n    function cancel() {\n        if (timerId !== undefined) {\n            cancelTimer(timerId);\n        }\n        lastInvokeTime = 0;\n        lastArgs = lastCallTime = lastThis = timerId = undefined;\n    }\n\n    function flush() {\n        return timerId === undefined ? result : trailingEdge(Date.now());\n    }\n\n    function pending() {\n        return timerId !== undefined;\n    }\n\n    function debounced(...args) {\n        const time = Date.now();\n        const isInvoking = shouldInvoke(time);\n\n        lastArgs = args;\n        lastThis = this;\n        lastCallTime = time;\n\n        if (isInvoking) {\n            if (timerId === undefined) {\n                return leadingEdge(lastCallTime);\n            }\n            if (maxing) {\n                // Handle invocations in a tight loop.\n                timerId = startTimer(timerExpired, wait);\n                return invokeFunc(lastCallTime);\n            }\n        }\n        if (timerId === undefined) {\n            timerId = startTimer(timerExpired, wait);\n        }\n        return result;\n    }\n    debounced.cancel = cancel;\n    debounced.flush = flush;\n    debounced.pending = pending;\n    return debounced;\n}\n","import React, { useCallback, useState } from 'react';\nimport { DEFAULT_TRANSITION_SPEED } from '../../constants';\nimport { debounce, validateTransitionSpeed } from '../../utils';\nimport './index.scss';\n\nconst TransitionSpeed = ({ onSpeedChange }) => {\n    const [value, setValue] = useState(DEFAULT_TRANSITION_SPEED);\n    const [errors, setErrors] = useState([]);\n    const handleOnChange = useCallback(\n        ({ target }) => {\n            const { value } = target;\n            setValue(value);\n            const [status, errs] = validateTransitionSpeed(value);\n            if (status) {\n                onSpeedChange(value);\n                setErrors([]);\n            } else {\n                setErrors(errs);\n            }\n        },\n        [onSpeedChange]\n    );\n\n    return (\n        <div className=\"transition-speed\">\n            <label>Transition speed</label>\n            <input\n                className=\"input\"\n                onKeyUp={debounce((event) => {\n                    handleOnChange(event);\n                }, 500)}\n                defaultValue={value}\n            />\n            {errors.length > 0 && (\n                <span className=\"speed-errors\">\n                    {errors.map((error, index) => (\n                        <span key={`speed-error${index}`}>{error}</span>\n                    ))}\n                </span>\n            )}\n        </div>\n    );\n};\n\nexport default TransitionSpeed;\n","export const DEFAULT_TRANSITION_SPEED = 0.5;\n","export { validateTransitionSpeed };\n\nfunction validateTransitionSpeed(speed) {\n    if (speed.length === 0) return [true, []]; // Assuming transition speed is an optional\n    const value = parseFloat(speed);\n    if (typeof value !== 'number')\n        return [false, ['Please input number only!']];\n    if (value < 0 || value > 10)\n        return [\n            false,\n            ['Please input number from 0 to 10 only such as 0.3, 0.5'],\n        ];\n    return [true, []];\n}\n","import React, { forwardRef } from 'react';\nimport './index.scss';\n\nconst AreaContainer = forwardRef(({ onClick, children }, ref) => (\n    <div ref={ref} className=\"area-container\" onClick={onClick}>\n        {children}\n    </div>\n));\n\nexport default AreaContainer;\n","import React, { useCallback, useRef, useState } from 'react';\nimport './App.scss';\nimport SquareBox from './components/square-box';\nimport TransitionSpeed from './components/transition-speed';\nimport AreaContainer from './components/area-container';\nimport { DEFAULT_TRANSITION_SPEED } from './constants';\n\nconst App = () => {\n    const areaRef = useRef();\n    const { x: areaX, y: areaY } =\n        (areaRef.current && areaRef.current.getBoundingClientRect()) || {};\n    const [transform, setTransform] = useState(0);\n    const [speed, setSpeed] = useState(DEFAULT_TRANSITION_SPEED);\n    const squareRef = useRef();\n\n    const handleOnClick = useCallback(\n        (e) => {\n            e.preventDefault();\n            const x = e.pageX - areaX - squareRef.current.offsetWidth / 2;\n            const y = e.pageY - areaY - squareRef.current.offsetHeight / 2;\n            setTransform(`translate3d(${x}px, ${y}px, 0)`);\n        },\n        [areaX, areaY]\n    );\n\n    const handleOnSpeedChange = useCallback((value) => {\n        setSpeed(value);\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <h2 className=\"welcome-title\">\n                Welcome to Star Global, Hope you enjoy!\n            </h2>\n            <TransitionSpeed onSpeedChange={handleOnSpeedChange} />\n            <AreaContainer ref={areaRef} onClick={handleOnClick}>\n                <SquareBox\n                    ref={squareRef}\n                    transform={transform}\n                    speed={speed}\n                />\n            </AreaContainer>\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}